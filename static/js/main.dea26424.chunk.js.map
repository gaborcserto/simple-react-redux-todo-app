{"version":3,"sources":["components/todoHeader.js","components/todoButton.js","withHooks.js","stores/createStore.js","stores/todosStore.js","containers/filterLink.js","components/todoFooter.js","containers/addTodo.js","components/todoListItem.js","components/todoList.js","containers/visibleTodoList.js","App.js","serviceWorker.js","index.js"],"names":["todoHeader","Typography","variant","gutterBottom","todoButton","active","children","onClick","props","Button","disabled","withHooks","mapHooksToProps","WrappedComponent","hookProps","createStore","apiFactory","initialState","StoreContext","createContext","store","useState","state","setState","useMemo","useApi","Provider","value","useContext","nextTodoId","getFilter","filter","addTodo","text","produce","draft","todos","push","id","completed","toggleTodo","forEach","todo","deleteTodo","index","splice","setFilter","getVisibleTodos","t","Error","filterTodos","TodosStoreProvider","useTodosStore","Link","Adapt","todoFooter","display","component","ButtonGroup","color","aria-label","className","input","onSubmit","e","preventDefault","trim","Input","fullWidth","inputRef","node","type","endIcon","todoListItem","clicked","deleted","ListItem","button","aria-hidden","ListItemText","style","textDecoration","todoList","List","map","Fragment","key","Divider","TodoList","App","Container","maxWidth","Card","CardContent","CardActions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dea26424.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Typography} from '@material-ui/core';\r\n\r\nconst todoHeader = () =>{\r\n\treturn <Typography variant=\"h4\" gutterBottom>Todo list</Typography>;\r\n}\r\n\r\nexport default todoHeader;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst todoButton = ({active, children, onClick, ...props}) => (\r\n\t<Button\r\n\t\t{...props}\r\n\t\tonClick={onClick}\r\n\t\tdisabled={active}\r\n\t>\r\n\t\t{children}\r\n\t</Button>\r\n)\r\n\r\ntodoButton.propTypes = {\r\n\tactive: PropTypes.bool.isRequired,\r\n\tchildren: PropTypes.node.isRequired,\r\n\tonClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default todoButton","import React from \"react\";\n\nconst withHooks = mapHooksToProps => WrappedComponent => {\n\treturn props => {\n\t\tlet hookProps = mapHooksToProps(props);\n\t\treturn <WrappedComponent {...hookProps} {...props} />;\n\t};\n};\n\nexport default withHooks;\n","import React, {createContext, useContext, useState, useMemo} from \"react\";\r\n\r\nconst useApi = (apiFactory, initialState) => {\r\n\tlet [state, setState] = useState(initialState);\r\n\treturn useMemo(() => apiFactory({state, setState}), [\r\n\t\tstate,\r\n\t\tsetState,\r\n\t\tapiFactory\r\n\t]);\r\n};\r\n\r\nconst createStore = (apiFactory, initialState) => {\r\n\tconst StoreContext = createContext();\r\n\r\n\tconst StoreProvider = props => {\r\n\t\tlet store = useApi(apiFactory, initialState);\r\n\t\treturn (\r\n\t\t\t<StoreContext.Provider value={store}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</StoreContext.Provider>\r\n\t\t);\r\n\t};\r\n\r\n\tlet useStore = () => {\r\n\t\treturn useContext(StoreContext);\r\n\t};\r\n\r\n\treturn [StoreProvider, useStore];\r\n};\r\n\r\nexport default createStore;\r\n","import createStore from \"./createStore\";\r\nimport produce from \"immer\";\r\n//import { v4 } from \"uuid\"\r\n\r\nlet nextTodoId = 0;\r\n\r\nlet [TodosStoreProvider, useTodosStore] = createStore(\r\n\t({state, setState}) => {\r\n\t\tconst addTodo = text => {\r\n\t\t\tsetState(\r\n\t\t\t\tproduce(draft => {\r\n\t\t\t\t\tdraft.todos.push({\r\n\t\t\t\t\t\tid: nextTodoId++,\r\n\t\t\t\t\t\ttext,\r\n\t\t\t\t\t\tcompleted: false\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\tconst toggleTodo = id => {\r\n\t\t\tsetState(\r\n\t\t\t\tproduce(draft => {\r\n\t\t\t\t\tdraft.todos.forEach(todo => {\r\n\t\t\t\t\t\tif (todo.id === id) {\r\n\t\t\t\t\t\t\ttodo.completed = !todo.completed;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\t/*const updateTodo = (index, value) => {\r\n\t\t\tsetState(\r\n\t\t\t\tproduce(draft => {\r\n\t\t\t\t\tdraft[index] = value;\r\n\t\t\t\t\treturn draft;\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}*/\r\n\r\n\t\tconst deleteTodo = index => {\r\n\t\t\tsetState(\r\n\t\t\t\tproduce(draft => {\r\n\t\t\t\t\tdraft.todos.splice(index, 1);\r\n\t\t\t\t\treturn draft;\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\tconst setFilter = filter => {\r\n\t\t\tsetState(\r\n\t\t\t\tproduce(draft => {\r\n\t\t\t\t\tdraft.filter = filter;\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\tconst getFilter = () => {\r\n\t\t\treturn state.filter;\r\n\t\t};\r\n\r\n\t\tconst getVisibleTodos = () => {\r\n\t\t\treturn filterTodos(state.todos, getFilter());\r\n\t\t};\r\n\r\n\t\treturn {\r\n\t\t\taddTodo,\r\n\t\t\ttoggleTodo,\r\n\t\t\tdeleteTodo,\r\n\t\t\tsetFilter,\r\n\t\t\tgetFilter,\r\n\t\t\tgetVisibleTodos\r\n\t\t};\r\n\t},\r\n\t{\r\n\t\ttodos: [],\r\n\t\tfilter: \"SHOW_ALL\"\r\n\t}\r\n);\r\n\r\nfunction filterTodos(todos, filter) {\r\n\tswitch (filter) {\r\n\t\tcase \"SHOW_ALL\":\r\n\t\t\treturn todos;\r\n\t\tcase \"SHOW_COMPLETED\":\r\n\t\t\treturn todos.filter(t => t.completed);\r\n\t\tcase \"SHOW_ACTIVE\":\r\n\t\t\treturn todos.filter(t => !t.completed);\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"Unknown filter: \" + filter);\r\n\t}\r\n}\r\n\r\nexport {TodosStoreProvider, useTodosStore};\r\n","import Link from \"../components/todoButton\";\nimport withHooks from \"../withHooks\";\nimport {useTodosStore} from \"../stores/todosStore\";\n\nconst MapHooksToProps = props => {\n\tlet {getFilter, setFilter} = useTodosStore();\n\n\treturn {\n\t\tactive: props.filter === getFilter(),\n\t\tonClick: () => setFilter(props.filter),\n\t\t...props\n\t};\n};\n\nexport default withHooks(MapHooksToProps)(Link);\n","import React from \"react\";\r\nimport FilterLink from \"../containers/filterLink\";\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport {Typography} from '@material-ui/core';\r\n\r\nconst Adapt = ({children, ...other}) => children(other);\r\n\r\nconst todoFooter = () => (\r\n\t<div>\r\n\t\t<Typography variant=\"body2\" display=\"inline\" component=\"span\">Show: </Typography>\r\n\t\t<ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n\t\t\t<Adapt>\r\n\t\t\t\t{({className, ...props}) => (\r\n\t\t\t\t\t<FilterLink className={className} {...props} filter={\"SHOW_ALL\"}>All</FilterLink>\r\n\t\t\t\t)}\r\n\t\t\t</Adapt>\r\n\t\t\t<Adapt>\r\n\t\t\t\t{({className, ...props}) => (\r\n\t\t\t\t\t<FilterLink className={className} {...props} filter={\"SHOW_ACTIVE\"}>Active</FilterLink>\r\n\t\t\t\t)}\r\n\t\t\t</Adapt>\r\n\t\t\t<Adapt>\r\n\t\t\t\t{({className, ...props}) => (\r\n\t\t\t\t\t<FilterLink className={className} {...props} filter={\"SHOW_COMPLETED\"}>Completed</FilterLink>\r\n\t\t\t\t)}\r\n\t\t\t</Adapt>\r\n\t\t</ButtonGroup>\r\n\t</div>\r\n);\r\n\r\nexport default todoFooter;","import React from \"react\";\nimport { useTodosStore } from \"../stores/todosStore\";\nimport withHooks from \"../withHooks\";\nimport { Input, Button } from '@material-ui/core';\nimport AddCircleOutlinedIcon from '@material-ui/icons/AddCircleOutlined';\n\nconst AddTodo = props => {\n  let input;\n\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          if (!input.value.trim()) {\n            return;\n          }\n          props.addTodo(input.value);\n          input.value = \"\";\n        }}\n      >\n        <Input fullWidth inputRef={node => (input = node)}/>\n        <Button\n            className=\"btn-todo\"\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n            endIcon={<AddCircleOutlinedIcon />}\n        >\n            Add Todo\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nconst MapHooksToProps = props => {\n  let { addTodo } = useTodosStore();\n\n  return {\n    addTodo\n  };\n};\n\nexport default withHooks(MapHooksToProps)(AddTodo);\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { ListItem, ListItemText } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\n\r\nconst todoListItem = ({clicked, completed, text, deleted}) => (\r\n\t<ListItem button className={completed ? 'completed' : null}>\r\n\t\t<span className=\"icon\" aria-hidden=\"true\">\r\n\t\t\t{completed ? <CheckBoxOutlinedIcon /> : <CheckBoxOutlineBlankIcon />}\r\n\t\t</span>\r\n\t\t<ListItemText\r\n\t\t\tonClick={clicked}\r\n\t\t\tstyle={{\r\n\t\t\t\ttextDecoration: completed ? 'line-through' : 'none'\r\n\t\t\t}}>\r\n\t\t\t{text}\r\n\t\t</ListItemText>\r\n\t\t<span\r\n\t\t\taria-label=\"delete\"\r\n\t\t\tonClick={deleted}\r\n\t\t\tclassName=\"delete\">\r\n\t\t\t<DeleteIcon />\r\n\t\t</span>\r\n\r\n\t</ListItem>\r\n)\r\n\r\ntodoListItem.propTypes = {\r\n\tclicked: PropTypes.func.isRequired,\r\n\tcompleted: PropTypes.bool.isRequired,\r\n\ttext: PropTypes.string.isRequired,\r\n\tdeleted: PropTypes.func.isRequired\r\n}\r\n\r\nexport default todoListItem","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TodoItem from './todoListItem'\r\nimport {List, Divider} from '@material-ui/core'\r\n\r\nconst todoList = ({todos, toggleTodo, deleteTodo}) => (\r\n\t<List className=\"list-group\">\r\n\t\t{todos.map((todo, index) =>\r\n\t\t\t<React.Fragment key={index}>\r\n\t\t\t\t<TodoItem\r\n\t\t\t\t\tkey={todo.id}\r\n\t\t\t\t\t{...todo}\r\n\t\t\t\t\tclicked={() => toggleTodo(todo.id)}\r\n\t\t\t\t\tdeleted={() => deleteTodo(index)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Divider/>\r\n\t\t\t</React.Fragment>\r\n\t\t)}\r\n\t</List>\r\n)\r\n\r\ntodoList.propTypes = {\r\n\ttodos: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tid: PropTypes.number.isRequired,\r\n\t\tcompleted: PropTypes.bool.isRequired,\r\n\t\ttext: PropTypes.string.isRequired\r\n\t}).isRequired).isRequired,\r\n\ttoggleTodo: PropTypes.func.isRequired,\r\n\tdeleteTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default todoList","//import React from \"react\";\nimport TodoList from \"../components/todoList\";\nimport {useTodosStore} from \"../stores/todosStore\";\nimport withHooks from \"../withHooks\";\n\nconst MapHooksToProps = props => {\n\tlet {getVisibleTodos, toggleTodo, deleteTodo} = useTodosStore();\n\n\treturn {\n\t\ttodos: getVisibleTodos(),\n\t\ttoggleTodo,\n\t\tdeleteTodo\n\t};\n};\n\nexport default withHooks(MapHooksToProps)(TodoList);\n","import React from 'react';\nimport { Container, Card, CardActions, CardContent } from '@material-ui/core';\nimport Header from './components/todoHeader'\nimport Footer from './components/todoFooter'\nimport AddTodo from './containers/addTodo'\nimport VisibleTodoList from './containers/visibleTodoList'\n\nimport './App.scss';\n\nfunction App() {\n\treturn (\n\t\t<Container maxWidth=\"sm\" id=\"main\" className=\"App\">\n\t\t\t<Card className=\"todo-app\">\n\t\t\t\t<CardContent>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<AddTodo />\n\t\t\t\t\t<VisibleTodoList />\n\t\t\t\t</CardContent>\n\t\t\t\t<CardActions>\n\t\t\t\t\t<Footer />\n\t\t\t\t</CardActions>\n\t\t\t</Card>\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport {TodosStoreProvider} from \"./stores/todosStore\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<TodosStoreProvider>\n\t\t\t<App/>\n\t\t</TodosStoreProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}